#r "Newtonsoft.Json"

using System;
using System.Net;
using System.Text;
using Newtonsoft.Json;

public static async Task Run(TimerInfo myTimer, ILogger log)
{
    var jsonString = await MakeStackOverflowRequest();

    var jsonOb = JsonConvert.DeserializeObject<dynamic>(jsonString);

    var newQuestionCount = jsonOb.items.Count;

    await MakeSlackRequest($"You have {newQuestionCount} question on Stack Overflow!");

    log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
}

public static async Task<string> MakeStackOverflowRequest()
{
    var epochTime = (Int32)(DateTime.UtcNow.AddDays(-1).Subtract(new DateTime(1970,1, 1))).TotalSeconds;
    HttpClientHandler handler = new HttpClientHandler()
    {
        AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate
    };

    using (var client = new HttpClient(handler))
    {
        var response = await client.GetAsync($"https://api.stackexchange.com/2.3/search?fromdate={epochTime}&order=desc&sort=activity&intitle=azure&site=stackoverflow");

        var result = await response.Content.ReadAsStringAsync();

        return result;
    }
}
public static async Task<string> MakeSlackRequest(string message)
{
    using (var client = new HttpClient())
    {
        var requestData = new StringContent("{'text':'"+ message + "'}", Encoding.UTF8, "application/json");

        var response = await client.PostAsync($"https://hooks.slack.com/services/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", requestData);

        var result = await response.Content.ReadAsStringAsync();

        return result;
    }
}